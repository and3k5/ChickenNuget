@using System.Web
@using Newtonsoft.Json
@model IDictionary<string, string>

@{
    var model = Model;
    if (model == null)
    {
        model = new Dictionary<string, string>();
    }
}

<script type="text/x-template" id="authentication-template">
    <div>
        <template v-for="row in model">
            <input type="text" v-bind="{name: 'Authentication['+model.indexOf(row)+'].Key'}" v-model="row.key" />
            <input type="text" v-bind="{name: 'Authentication['+model.indexOf(row)+'].Value'}" v-model="row.value" />
            <button type="button" class="btn btn-danger" @@click="removeRow(model.indexOf(row))">Remove</button>
        </template>
        <button type="button" class="btn btn-default" @@click="insertRow()">Add</button>
    </div>
</script>

<script type="text/javascript">
    Vue.component('authentication-input',
        {
            template: '#authentication-template',
            props: {
                model: Array
            },
            methods: {
                getTargetName: function(value) {
                    return this.model.settlementConfig.targets.filter(function(t) {
                        return t.value == value;
                    })[0].text;
                },
                insertRow: function(before, index) {
                    var newRow = [{ key: "", value: "" }];
                    this.model.push(newRow);
                },
                removeRow: function(index) {
                    this.model.splice(index, 1);
                }
            }
        });


</script>

<div id="authInput">
    <authentication-input :model="value"></authentication-input>
</div>

<script type="text/javascript">
    var demo = new Vue({
        el: '#authInput',
        data: {
            value: JSON.parse("@(Html.Raw(HttpUtility.JavaScriptStringEncode(JsonConvert.SerializeObject(model.Select(kv => new {key = kv.Key, value = kv.Value})))))"),
        }
    });

</script>